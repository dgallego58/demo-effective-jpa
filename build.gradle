plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.3"
    id 'java'
    id 'idea'
    id 'jacoco'
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

idea {
    module {
        downloadSources(true)
        downloadJavadoc(true)
    }
}

ext {
    set('springBootAdminVersion', "2.6.5")
    set('testcontainersVersion', "1.16.2")
    set('springCloudVersion', "2021.0.2")
    set('blazePersistenceVersion', '1.6.6')
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // OPS and Observability
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'io.opentracing.brave:brave-opentracing'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'

    // DBs
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    //Blaze modules for DTO better handling
    //core blaze
    implementation "com.blazebit:blaze-persistence-core-api:${blazePersistenceVersion}"
    runtimeOnly "com.blazebit:blaze-persistence-core-impl:${blazePersistenceVersion}"
    // blaze hibernate 5.4
    runtimeOnly "com.blazebit:blaze-persistence-integration-hibernate-5.6:${blazePersistenceVersion}"
    // blaze entity view module
    implementation "com.blazebit:blaze-persistence-entity-view-api:${blazePersistenceVersion}"
    implementation "com.blazebit:blaze-persistence-entity-view-impl:${blazePersistenceVersion}"
    // blaze spring integration
    implementation "com.blazebit:blaze-persistence-integration-entity-view-spring:${blazePersistenceVersion}"
    implementation "com.blazebit:blaze-persistence-integration-spring-data-2.4:${blazePersistenceVersion}"
    // dependencies for blaze spring integration
    implementation "com.blazebit:blaze-persistence-jpa-criteria-api:${blazePersistenceVersion}"
    runtimeOnly "com.blazebit:blaze-persistence-jpa-criteria-impl:${blazePersistenceVersion}"

    implementation "com.blazebit:blaze-persistence-jpa-criteria-jpa-2-compatibility:${blazePersistenceVersion}"
    //blaze annotation processor
    annotationProcessor "com.blazebit:blaze-persistence-entity-view-processor:${blazePersistenceVersion}"

    // annotation processors
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //documentation
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.12'
    implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.5.12'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "dgallego58_demo-effective-jpa"
        property "sonar.organization", "dgallego58"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.language', 'java'
        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property 'sonar.jacoco.reportPaths', "${buildDir}/jacoco/test.exec"
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/jacoco.xml"
    }
}
printf("build dir is ${buildDir}")
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        xml.destination file("${buildDir}/reports/jacoco/jacoco.xml")
    }
}
